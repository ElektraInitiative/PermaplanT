// Pipeline for PR's, master merges and production

import org.jenkinsci.plugins.pipeline.modeldefinition.Utils

// Function duplicated in `Jenkinsfile.release`
def node_info() {
    echo "Running stage on ${env.NODE_NAME}"
}

// Function duplicated in `Jenkinsfile.release` without the command parameter
def wait_for_db(String command) {
    retry(10) {
        sleep(time: 5, unit: 'SECONDS')
        sh "${command}"
    }
}

/**
 * Aborts the previous build in progress if it exists and the current build is not on the "master" branch.
 * This method is used to prevent multiple concurrent builds for non-master branches.
 */
def abortPreviousRunUnlessMaster() {
    if (env.BRANCH_NAME == 'master') { return }
    def exec = currentBuild
             ?.rawBuild
             ?.getPreviousBuildInProgress()
             ?.getExecutor()
    if (exec) {
        exec.interrupt(
      Result.ABORTED,
      new CauseOfInterruption.UserInterruption(
        "Aborted by Build#${currentBuild.number}"
      )
    )
    }
}

// function content duplicated in `Jenkinsfile.release`
/**
 * This method runs a Docker container with a Postgres sidecar and executes the specified command inside the container.
 *
 * @param command The command to be executed inside the Docker container.
 * @param stashsrcList The list of file paths to be stashed (optional).
 * @param stashdirList The list of stash directory names for stashing files (optional).
 * @return A closure representing the defined Jenkins pipeline steps.
 * @throws UnequalStashException If the stashed files are not equal in count between stashsrcList and
 * stashdirList.
 */
def runDockerPostgresSidecar(String command,  List<String> stashsrc = [], List<String> stashdir = []) {
    return {
        node('docker') {
            node_info()
            checkout scm
            def rustImage = docker.build('permaplant-rust:ci', './ci/container-images/permaplant-rust')
            docker.image('postgis/postgis:13-3.1').withRun('-e "POSTGRES_USER=ci" -e "POSTGRES_PASSWORD=ci"') { c ->
                rustImage.inside("--link ${c.id}:db \
                -e 'DATABASE_URL=postgres://ci:ci@db/ci' \
                -e 'BIND_ADDRESS_HOST=127.0.0.1' \
                -e 'BIND_ADDRESS_PORT=8080' \
                -e 'AUTH_DISCOVERY_URI=unused' \
                -e 'AUTH_CLIENT_ID=unused' \
                -e 'RUSTFLAGS=-D warnings' \
                -e 'RUSTDOCFLAGS=-D warnings'"
                ) {
                    checkout scm
                    wait_for_db('/usr/bin/pg_isready --host=db --username=ci --dbname=ci --timeout=60')
                    sh './ci/build-scripts/build-schema.sh'
                    // Because in Deploy the path for /target is a
                    //env in permaplant-deploy.sh, we can only solve it with prepending cd backend
                    sh "cd backend && ${command}"
                    if (stashsrc.size() != stashdir.size()) {
                        throw new UnequalStashException()
                    }
                    for (int i = 0; i < stashsrc.size(); i++) {
                        stash includes: stashsrc[i], name: stashdir[i]
                    }
                }
            }
        }
    }
}

// function content duplicated in `Jenkinsfile.release`
/**
 * Run a script inside a desired docker image with custom docker arguments.
 * @param command The command to be executed inside the Docker container.
 * @param dockerImage The docker image name
 * @param dockerArgs The docker build args.
 * @param skipInMaster If true, skips this stage in branch master.
 *
 * @return A closure representing the defined Jenkins pipeline steps.
 */
def runDocker(String command, String dockerImage, String dockerBuildArgs, boolean skipInMaster = false) {
    if (skipInMaster && env.BRANCH_NAME == 'master') {
        return { echo 'Set to be skipped in master.' }
    }
    return {
        node('docker') {
            node_info()
            checkout scm
            docker.build(dockerImage, dockerBuildArgs).inside() {
                sh "${command}"
            }
        }
    }
}

// mdbook build duplicated in `Jenkinsfile.release`
/**
 * Test, Build and stash Mdbook inside permaplants docker image.
 *

 * @return A closure representing the defined Jenkins pipeline steps.
 */
def testAndBuildMdbook() {
    return {
        node('docker') {
            node_info()
            checkout scm
            docker.build('permaplant-doc:ci', './doc').inside {
                stage('test') {
                    sh 'make test-mdbook'
                }

                stage('build') {
                    sh 'mdbook build'
                    stash includes: 'book/', name: 'mdbook'
                }
            }
        }
    }
}

/**
 * Calculates the checksum of a given file.
 *
 * @param file The name of the file for which the checksum should be calculated.
 * @return The checksum of the file as a trimmed string.
 */
def checksum(String file) {
    return sh(returnStdout: true, script: "checksum $file").trim()
}

def testAndBuildFrontend() {
    return {
        node('docker') {
            node_info()
            checkout scm
            def nodeImage = docker.build('permaplant-node:ci', '-f ./ci/container-images/permaplant-node/Dockerfile .')
            nodeImage.inside {
                unstash 'definitions.ts'
                stage('test') {
                    // groovylint-disable-next-line
                    dir('frontend') {
                        def checksumBefore = checksum('package-lock.json')
                        sh 'npm i'
                        def checksumAfter = checksum('package-lock.json')
                        echo 'Checking if package-lock.json is modified by npm install'
                        // groovylint-disable-next-line
                        if (checksumBefore != checksumAfter) { throw new PackageLockJsonModifiedException() }
                        sh 'npm ci'
                        sh 'npm run format:check'
                        sh 'npm run lint'
                        sh 'npm run test'
                    }
                }

                stage('build') {
                    sh './ci/build-scripts/build-frontend.sh'
                    stash includes: 'frontend/dist/**/*', name: 'frontend'
                }

                stage('typedoc') {
                    sh 'cd frontend && npm run doc'
                    stash includes: 'frontend/src/generated/docs/', name: 'typedoc'
                }

                stage('storybook') {
                    sh './ci/build-scripts/build-storybook.sh'
                    stash includes: 'frontend/storybook-static/**/*', name: 'storybook'
                }
            }
        }
    }
}

/**
 * Decide which type of migration test strategy to return depending on the branch.
 *
 * @return A command as String.
 */
def testMigrations() {
    if (env.BRANCH_NAME != 'master') {
        return 'make migration && make migration-redo && make migration-redo-a'
    } else {
        return 'make migration && make migration-redo'
    }
}

// /**
//  * Copy the documentation to doc.permaplant.net server
//  */
def copyDocumentation(String location) {
    echo 'Copying Documentation ...'
    sshPublisher(
        publishers: [
        sshPublisherDesc(
            verbose: true,
            configName: 'doc.permaplant.net',
            transfers: [
                sshTransfer(
                    sourceFiles: 'backend/target/doc/**/*',
                    removePrefix: 'backend/target/doc/',
                    remoteDirectory: "${location}/cargodoc"
                ),
                sshTransfer(
                    sourceFiles: 'book/html/**/*',
                    removePrefix: 'book/html/',
                    remoteDirectory: "${location}/mdbook"
                ),
                sshTransfer(
                    sourceFiles: 'frontend/storybook-static/**/*',
                    removePrefix: 'frontend/storybook-static/',
                    remoteDirectory: "${location}/storybook"
                )
            ]
        )
        ]
    )

}

// PIPELINE BEGIN
abortPreviousRunUnlessMaster()

timeout(time: 2, unit: 'HOURS') {
    try {
        stage('Sanity') {
            List<String> schemaStashsrc = [
                'backend/src/schema.rs', 'frontend/src/api_types/definitions.ts'
            ]
            List<String> schemaStashdir = ['schema.rs', 'definitions.ts']
            parallel(
                'pre-commit': runDocker(
                    './ci/scripts/check-pre-commit.sh',
                    'permaplant-node:ci',
                    '-f ./ci/container-images/permaplant-node/Dockerfile .'
                    ),
                // Workaround: we can't stop rustfmt from linting the generated schema.rs
                // so we empty the file before.
                'cargo-fmt': runDockerPostgresSidecar(
                    "/bin/bash -c 'echo \"\" > src/schema.rs' && cargo fmt --check"
                    ),
                // End of workaround
                'schema': runDockerPostgresSidecar(
                    'echo schema test', schemaStashsrc, schemaStashdir
                    ),
                'migration': runDockerPostgresSidecar(testMigrations()),
                'changelog': runDocker(
                    './ci/scripts/check-changelog.sh',
                    'permaplant-node:ci',
                    '-f ./ci/container-images/permaplant-node/Dockerfile .',
                    true
                    ),
                failFast: true
            )
        }

        stage('Test and Build') {
            parallel(
                'cargo-build': runDockerPostgresSidecar(
                    'cargo build --release',
                    ['backend/target/release/backend'],
                    ['backend']
                ),
                'cargo-clippy-doc': runDockerPostgresSidecar(
                    'cargo clippy && cargo doc --document-private-items',
                    ['backend/target/doc/**/*'],
                    ['cargodoc']
                ),
                'cargo-test': runDockerPostgresSidecar('cargo test'),
                'frontend': testAndBuildFrontend(),
                'mdbook': testAndBuildMdbook(),
                failFast: true
            )
        }
    } catch (err) {
        node('docker') {
            deleteDir()
            throw err
        }
    }
}

if (env.BRANCH_NAME.startsWith('PR')){
lock("${env.NODE_NAME}-exclusive") {
    // `Deploy PR` stage similar to `Deploy Dev` and `Jenkinsfile.release.Deploy Prod`
    stage('Deploy PR') {
        node('permaplant && pr') {
            node_info()

            checkout scm

            echo "Workspace is '${WORKSPACE}'"
            echo 'Ensure permaplant service is stopped'
            sh 'sudo /usr/sbin/service permaplant stop'

            withEnv(['DATABASE_URL=postgres://permaplant:permaplant@127.0.0.1/permaplant']) {
                echo 'Resetting the CI DB ...'
                sh 'sudo /usr/local/bin/permaplant-reset-ci.sh'

                echo 'Unstash Artifacts'
                unstash 'schema.rs'
                unstash 'frontend'
                unstash 'backend'
                unstash 'storybook'
                unstash 'typedoc'
                unstash 'mdbook'
                unstash 'cargodoc'

                echo 'Deploying to PR'
                sh "sudo /usr/local/bin/permaplant-deploy.sh pr ${WORKSPACE}"

                echo 'Loading Data to PR'
                dir('scraper') {
                    sh 'npm ci'
                    sh 'mkdir ./data/'
                    sh 'cp /data/*.csv ./data/'
                    sh 'npm run insert'
                    sh 'rm -rf ./data/'
                    sh 'rm -rf ./node_modules/'
                }

                copyDocumentation('pr')
            }
        }
    }

    stage('E2E Tests') {
        node('docker') {
            node_info()
            checkout scm
            def target = 'https://pr.permaplant.net'
            if (env.BRANCH_NAME == 'master') {
                echo 'Skipping E2E Tests for master'
                return
            }
            try {
                docker.build('permaplant-e2e:ci', './e2e').inside('-e E2E_URL=' + target) {
                    wait_for_db('curl --fail https://pr.permaplant.net/api/config')
                    sh 'make test-e2e'
                }
            } catch (err) {
                echo "Error occurred during the e2eImage.inside block: ${err}"
                // rethrow so build fails
                // groovylint-disable-next-line
                throw err;
            } finally {
                archiveArtifacts artifacts: 'e2e/test-results/**', fingerprint: true,  allowEmptyArchive: true
                archiveArtifacts artifacts: 'e2e/test-reports/report.html', fingerprint: true,  allowEmptyArchive: true
                cucumber failedFeaturesNumber: -1, failedScenariosNumber: -1, failedStepsNumber: -1, \
                fileIncludePattern: 'e2e/test-reports/cucumber.json', pendingStepsNumber: -1, skippedStepsNumber: -1, \
                sortingMethod: 'ALPHABETICAL', undefinedStepsNumber: -1
                deleteDir()
            }
        }
    }
}
}

// Deploying to Dev only happens on branch "master"
if (env.BRANCH_NAME == 'master') {
    try {
        // `Deploy Dev` stage similar to `Deploy PR` and `Jenkinsfile.release.Deploy Prod`
        stage('Deploy Dev') {
            node('permaplant && dev') {
                node_info()

                checkout scm

                echo 'Unstash Artifacts'
                unstash 'schema.rs'
                unstash 'frontend'
                unstash 'backend'
                unstash 'storybook'
                unstash 'typedoc'
                unstash 'mdbook'
                unstash 'cargodoc'

                echo 'Deploying to Dev ...'
                sh "sudo /usr/local/bin/permaplant-deploy.sh dev ${WORKSPACE}"

                copyDocumentation('dev')
            }
        }
    } catch (Exception e) { // groovylint-disable-line
        // If master is failing we want to know ASAP so send a mail.
        // collect changes since last build
        def changes = currentBuild.changeSets.collect {
            it.collect {
                "* ${it.getCommitId().take(7)} - ${it.getAuthor()} - ${it.getMsg().take(40)}"
        }.join('\n')
        }.join('\n')
        if (!changes) {
            changes = '* No new changes since last build'
        }

        def message = """\
Build ${JOB_NAME}:${BUILD_NUMBER} failed.
Url: ${RUN_DISPLAY_URL}
Reason: ${e}

Changes: ${RUN_CHANGES_DISPLAY_URL}
${changes}

Logs: ${currentBuild.rawBuild.getLog(20).join('\n')}
"""
        mail subject: "Build ${JOB_NAME} failed",
        body: message,
        replyTo: 'noreply@libelektra.org',
        to: 'build@libelektra.org'
        throw err
    }
}

// PRODUCTION DEPLOYMENT
// see Jenkinsfile.release

class PackageLockJsonModifiedException extends Exception {

    PackageLockJsonModifiedException() {
        super('package-lock.json was modified by npm install. Did you maybe use a wrong node version?')
    }

}

class UnequalStashException extends Exception {

    UnequalStashException() {
        super('The stashed files count in stashsrc and stashdir lists must be equal.')
    }

}
