// This is the main pipeline that gets executed for PR's and master merges.

node('docker') {
    checkout scm
    utils = load('ci/Jenkinsfile_utils.groovy')
    schema = load('ci/steps/Jenkinsfile_schema.groovy')
    frontend = load('ci/steps/Jenkinsfile_frontend.groovy')
    backend = load('ci/steps/Jenkinsfile_backend.groovy')
    mdbook = load('ci/steps/Jenkinsfile_mdbook.groovy')
}

utils.main_wrapper(
{
    // Abort previous runs
    utils.abortPreviousRun()

    // Have to put it in a parallel stage, otherwise doesnt work.
    utils.parallel_stage('Prepare', [
        schema.buildSchema()
    ])

    utils.parallel_stage('Test and Build', [
        backend.testAndBuildBackend(),
        frontend.testAndBuildFrontend(),
        mdbook.testAndBuildMdbook(),
    ])
})

stage('Deploy PR') {
    node('permaplant && pr') {
        utils.node_info()

        checkout scm

        echo "Workspace is '${WORKSPACE}'"
        echo 'Ensure pr service is stopped'
        sh 'sudo /usr/sbin/service permaplant-pr stop'

        withEnv(['DATABASE_URL=postgres://cidb:cidb@127.0.0.1/cidb']) {
            echo 'Resetting the CI DB ...'
            sh 'sudo /usr/local/bin/permaplant-reset-ci.sh'

            echo "Unstash Artifacts"
            unstash 'schema.rs'
            unstash 'frontend'
            unstash 'backend'
            unstash 'storybook'
            unstash 'typedoc'
            unstash 'mdbook'

            echo 'Deploying to PR'
            sh "sudo /usr/local/bin/permaplant-deploy.sh pr ${WORKSPACE}"

            echo 'Loading Data to PR'
            dir('scraper') {
                sh 'npm ci'
                sh 'mkdir ./data/'
                sh 'cp /nextcloud/mergedDatasets.csv ./data/'
                sh 'npm run insert'
                sh 'rm -rf ./data/'
                sh 'rm -rf ./node_modules/'
            }
        }
    }
}

// Deploying to Dev only happens on branch "master"
if (env.BRANCH_NAME == 'master') {
    try {
        stage('Deploy Dev') {
            node('permaplant && dev') {
                utils.node_info()

                checkout scm

                echo "Unstash Artifacts"
                unstash 'schema.rs'
                unstash 'frontend'
                unstash 'backend'
                unstash 'storybook'
                unstash 'typedoc'
                unstash 'mdbook'

                echo 'Deploying to Dev ...'
                sh "sudo /usr/local/bin/permaplant-deploy.sh dev ${WORKSPACE}"
            }
        }
    } catch(Exception e) {
        // If master is failing we want to know ASAP so send a mail.
        // collect changes since last build
        def changes = currentBuild.changeSets.collect() {
        it.collect() {
            "* ${it.getCommitId().take(7)} - ${it.getAuthor()} - ${it.getMsg().take(40)}"
        }.join('\n')
        }.join('\n')
        if (!changes) {
        changes = "* No new changes since last build"
        }

        def message = """\
Build ${JOB_NAME}:${BUILD_NUMBER} failed.
Url: ${RUN_DISPLAY_URL}
Reason: ${e}

Changes: ${RUN_CHANGES_DISPLAY_URL}
${changes}

Logs: ${currentBuild.rawBuild.getLog(20).join('\n')}
"""
    mail subject: "Build ${JOB_NAME} failed",
        body: message,
        replyTo: "noreply@libelektra.org",
        to: "build@libelektra.org"
    }
}
