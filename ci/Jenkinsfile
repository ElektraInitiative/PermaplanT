def node_info() {
    echo "Running stage on ${env.NODE_NAME}"
}

def wait_for_db() {
    retry(6) {
        sleep(time: 5, unit: 'SECONDS')
        sh '/usr/bin/pg_isready --host=db --username=ci --dbname=ci --timeout=60'
    }
}

/**
 * Aborts the previous build in progress if it exists and the current build is not on the "master" branch.
 * This method is used to prevent multiple concurrent builds for non-master branches.
 */
def abortPreviousRunUnlessMaster() {
    if (env.BRANCH_NAME == 'master') { return }
    def exec = currentBuild
             ?.rawBuild
             ?.getPreviousBuildInProgress()
             ?.getExecutor()
    if (exec) {
        exec.interrupt(
      Result.ABORTED,
      new CauseOfInterruption.UserInterruption(
        "Aborted by Build#${currentBuild.number}"
      )
    )
    }
}

/**
 * This method runs a Docker container with a Postgres sidecar and executes the specified command inside the container.
 *
 * @param commands The list of commands to be executed inside the Docker container.
 * @param stashsrcList The list of file paths to be stashed (optional).
 * @param stashdirList The list of stash directory names for stashing files (optional).
 * @return A closure representing the defined Jenkins pipeline steps.
 * @throws UnequalStashException If the stashed files are not equal in count between stashsrcList and
 * stashdirList.
 */
def runDockerWithPostgresSidecar(String command,  List<String> stashsrc = [], List<String> stashdir = []) {
    return {
        node('docker') {
            node_info()
            checkout scm
            def rustImage = docker.build('permaplant-rust', './ci/container-images/permaplant-rust')
            docker.image('postgis/postgis:13-3.1').withRun('-e "POSTGRES_USER=ci" -e "POSTGRES_PASSWORD=ci"') { c ->
                rustImage.inside("--link ${c.id}:db \
                -e 'DATABASE_URL=postgres://ci:ci@db/ci' \
                -e 'BIND_ADDRESS_HOST=127.0.0.1' \
                -e 'BIND_ADDRESS_PORT=8080' \
                -e 'AUTH_DISCOVERY_URI=unused' \
                -e 'AUTH_CLIENT_ID=unused' \
                -e 'RUSTFLAGS=-D warnings' \
                -e 'RUSTDOCFLAGS=-D warnings' \
                -v ${WORKSPACE}/cargo/registry:/usr/local/cargo/registry \
                -v ${WORKSPACE}/cargo/git:/usr/local/cargo/git \
                "
                ) {
                    checkout scm
                    wait_for_db()
                    sh './ci/build-scripts/build-schema.sh'
                    // Because in Deploy the path for /target is a
                    //env in permaplant-deploy.sh, we can only solve it with prepending cd backend
                    sh "cd backend && ${command}"
                    if (stashsrc && stashdir) {
                        if (stashsrc.size() != stashdir.size()) {
                            throw new UnequalStashException()
                        }
                        for (int i = 0; i < stashsrc.size(); i++) {
                            stash includes: stashsrc[i], name: stashdir[i]
                        }
                    }
                }
            }
        }
    }
}

def testAndBuildMdbook() {
    return {
        node('docker') {
            node_info()
            checkout scm
            docker.build('permaplant-doc:build', './doc').inside {
                stage('test') {
                    sh 'make test-mdbook'
                }

                stage('build') {
                    sh 'make build-mdbook'
                    stash includes: 'book/', name: 'mdbook'
                }
            }
        }
    }
}

/**
 * Calculates the checksum of a given file.
 *
 * @param file The name of the file for which the checksum should be calculated.
 * @return The checksum of the file as a trimmed string.
 */
def checksum(String file) {
    return sh(returnStdout: true, script: "checksum $file").trim()
}

def testAndBuildFrontend() {
    return {
        node('docker') {
            node_info()
            checkout scm
            def nodeImage = docker.build('permaplant-node', './ci/container-images/permaplant-node')
            nodeImage.inside {
                checkout scm
                unstash 'definitions.ts'
                stage('test') {
                    // groovylint-disable-next-line
                    dir('frontend') {
                        def checksumBefore = checksum('package-lock.json')
                        sh 'npm i'
                        def checksumAfter = checksum('package-lock.json')
                        echo 'Checking if package-lock.json is modified by npm install'
                        // groovylint-disable-next-line
                        if (checksumBefore != checksumAfter) { throw new PackageLockJsonModifiedException() }
                        sh 'npm ci'
                        sh 'npm run format:check'
                        sh 'npm run lint'
                        sh 'npm run test'
                    }
                }

                stage('build') {
                    sh './ci/build-scripts/build-frontend.sh'
                    stash includes: 'frontend/dist/**/*', name: 'frontend'
                }

                stage('typedoc') {
                    sh 'cd frontend && npm run doc'
                    stash includes: 'frontend/src/generated/docs/', name: 'typedoc'
                }

                stage('storybook') {
                    sh './ci/build-scripts/build-storybook.sh'
                    stash includes: 'frontend/storybook-static/**/*', name: 'storybook'
                }
            }
        }
    }
}

def testMigrations() {
    if (env.BRANCH_NAME!="master") {
        return "make migration && make migration-redo && make migration-redo-a"
    } else {
        return "make migration && make migration-redo"
    }
}

// PIPELINE BEGIN
abortPreviousRunUnlessMaster()
preBuildCleanup {
    excludePattern('${WORKSPACE}/cargo')
}

timeout(time: 2, unit: 'HOURS') {
    try {
        stage('Sanity') {
            List<String> schemaStashsrc = [
                'backend/src/schema.rs','frontend/src/bindings/definitions.ts'
            ]
            List<String> schemaStashdir = ['schema.rs', 'definitions.ts']
            parallel(
                    // Workaround: we can't stop rustfmt from linting the generated schema.rs so we empty the file before.
                    "cargo-fmt": runDockerWithPostgresSidecar(
                        "/bin/bash -c 'echo \"\" > src/schema.rs' && cargo fmt --check"
                        ),
                    "schema": runDockerWithPostgresSidecar(
                        'echo schema test', schemaStashsrc, schemaStashdir
                        ),
                    "migration": runDockerWithPostgresSidecar(testMigrations()),
                    failFast: true
            )
        }

        stage('Test and Build') {
            parallel(
                    'cargo-build': runDockerWithPostgresSidecar(
                        'cargo build --release',
                        ['backend/target/release/backend'],
                        ['backend']
                    ),
                    'cargo-clippy/doc': runDockerWithPostgresSidecar('cargo clippy && cargo doc'),
                    'cargo-test': runDockerWithPostgresSidecar('cargo test'),
                    'frontend': testAndBuildFrontend(),
                    'mdbook': testAndBuildMdbook(),
                    failFast: true
            )
        }
    } catch(err) {
        deleteDir();
        throw err;
    }
}

stage('Deploy PR') {
    node('permaplant && pr') {
        node_info()

        checkout scm

        echo "Workspace is '${WORKSPACE}'"
        echo 'Ensure pr service is stopped'
        sh 'sudo /usr/sbin/service permaplant-pr stop'

        withEnv(['DATABASE_URL=postgres://cidb:cidb@127.0.0.1/cidb']) {
            echo 'Resetting the CI DB ...'
            sh 'sudo /usr/local/bin/permaplant-reset-ci.sh'

            echo 'Unstash Artifacts'
            unstash 'schema.rs'
            unstash 'frontend'
            unstash 'backend'
            unstash 'storybook'
            unstash 'typedoc'
            unstash 'mdbook'

            echo 'Deploying to PR'
            sh "sudo /usr/local/bin/permaplant-deploy.sh pr ${WORKSPACE}"

            echo 'Loading Data to PR'
            dir('scraper') {
                sh 'npm ci'
                sh 'mkdir ./data/'
                sh 'cp /nextcloud/mergedDatasets.csv ./data/'
                sh 'cp /nextcloud/Companions.csv ./data/'
                sh 'cp /nextcloud/Antagonist.csv ./data/'
                sh 'cp /nextcloud/Sizes.csv ./data/'
                sh 'npm run insert'
                sh 'rm -rf ./data/'
                sh 'rm -rf ./node_modules/'
            }
        }
    }
}

// Deploying to Dev only happens on branch "master"
if (env.BRANCH_NAME == 'master') {
    try {
        stage('Deploy Dev') {
            node('permaplant && dev') {
                node_info()

                checkout scm

                echo 'Unstash Artifacts'
                unstash 'schema.rs'
                unstash 'frontend'
                unstash 'backend'
                unstash 'storybook'
                unstash 'typedoc'
                unstash 'mdbook'

                echo 'Deploying to Dev ...'
                sh "sudo /usr/local/bin/permaplant-deploy.sh dev ${WORKSPACE}"
            }
        }
    } catch (Exception e) { // groovylint-disable-line
        // If master is failing we want to know ASAP so send a mail.
        // collect changes since last build
        def changes = currentBuild.changeSets.collect {
            it.collect {
                "* ${it.getCommitId().take(7)} - ${it.getAuthor()} - ${it.getMsg().take(40)}"
        }.join('\n')
        }.join('\n')
        if (!changes) {
            changes = '* No new changes since last build'
        }

        def message = """\
Build ${JOB_NAME}:${BUILD_NUMBER} failed.
Url: ${RUN_DISPLAY_URL}
Reason: ${e}

Changes: ${RUN_CHANGES_DISPLAY_URL}
${changes}

Logs: ${currentBuild.rawBuild.getLog(20).join('\n')}
"""
        mail subject: "Build ${JOB_NAME} failed",
        body: message,
        replyTo: 'noreply@libelektra.org',
        to: 'build@libelektra.org'
        throw err
    }
}

// PRODUCTION DEPLOYMENT
// see Jenkinsfile.release

class PackageLockJsonModifiedException extends Exception {
    PackageLockJsonModifiedException() {
        super('package-lock.json was modified by npm install. Did you maybe use a wrong node version?')
    }
}

class UnequalStashException extends Exception {
    UnequalStashException() {
        super("The stashed files count in stashsrc and stashdir lists must be equal.")
    }
}
