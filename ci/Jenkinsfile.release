def node_info() {
    echo "Running stage on ${env.NODE_NAME}"
}

def wait_for_db() {
    retry(6) {
        sleep(time: 5, unit: 'SECONDS')
        sh '/usr/bin/pg_isready --host=db --username=ci --dbname=ci --timeout=10'
    }
}

stage('Build Schema'){
    node('docker') {
        node_info()

        checkout scm
        def rust_image = docker.build("permaplant-rust", "./ci/container-images/permaplant-rust")

        docker.image('postgis/postgis:13-3.1').withRun('-e "POSTGRES_USER=ci" -e "POSTGRES_PASSWORD=ci"') { c ->
            rust_image.inside("--link ${c.id}:db -e 'DATABASE_URL=postgres://ci:ci@db/ci'") {
                checkout scm

                wait_for_db()

                sh './ci/build-scripts/build-schema.sh'

                stash includes: 'backend/src/schema.rs', name: 'schema.rs'
                stash includes: 'frontend/src/bindings/definitions.ts', name: 'definitions.ts'
            }
        }
    }
}

stage('Build in Docker'){
    def parallel_build = [:]

    parallel_build['build-backend'] = {
        node('docker') {
            node_info()

            checkout scm
            def rust_image = docker.build("permaplant-rust", "./ci/container-images/permaplant-rust")

            docker.image('postgis/postgis:13-3.1').withRun('-e "POSTGRES_USER=ci" -e "POSTGRES_PASSWORD=ci"') { c ->
                rust_image.inside("--link ${c.id}:db -e 'DATABASE_URL=postgres://ci:ci@db/ci'") {
                    checkout scm

                    wait_for_db()

                    sh './ci/build-scripts/build-backend.sh'

                    stash includes: 'backend/target/release/backend', name: 'backend'
                }
            }
        }
    }

    parallel_build['build-frontend'] = {
        node('docker') {
            node_info()

            checkout scm
            def node_image = docker.build("permaplant-node", "./ci/container-images/permaplant-node")

            node_image.inside {
                checkout scm
                unstash 'definitions.ts'

                sh './ci/build-scripts/build-frontend.sh'
                stash includes: 'frontend/dist/**/*', name: 'frontend'
            }
        }
    }

    parallel(parallel_build)
}

stage('Deploy Prod') {
    node('permaplant && prod') {
        checkout scm

        echo "Unstash Artifacts"
        unstash 'schema.rs'
        unstash 'frontend'
        unstash 'backend'

        echo 'Deploying to Prod ...'
        sh "sudo /usr/local/bin/permaplant-deploy.sh prod ${WORKSPACE}"
    }
}
