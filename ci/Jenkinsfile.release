def node_info() {
    echo "Running stage on ${env.NODE_NAME}"
}

def wait_for_db() {
    retry(6) {
        sleep(time: 5, unit: 'SECONDS')
        sh '/usr/bin/pg_isready --host=db --username=ci --dbname=ci --timeout=10'
    }
}

// /**
//  * Copy the documentation to doc.permaplant.net server
//  */
def copyDocumentation() {
    echo 'Copying Documentation ...'
    sshPublisher(
        publishers: [
        sshPublisherDesc(
            verbose: true,
            configName: 'doc.permaplant.net',
            transfers: [
            sshTransfer(
                sourceFiles: 'backend/target/doc/*',
                removePrefix: 'backend/target/doc/',
                remoteDirectory: "www/cargodoc"
            ),
            sshTransfer(
                sourceFiles: 'book/html/*',
                removePrefix: 'book/html/',
                remoteDirectory: "www/mdbook"
            ),
            sshTransfer(
                sourceFiles: 'frontend/storybook-static/*',
                removePrefix: 'frontend/storybook-static/',
                remoteDirectory: "www/storybook"
            )
            ]
        )
        ]
    )

}

stage('Build Schema') {
    node('docker') {
        node_info()

        checkout scm
        def rustImage = docker.build('permaplant-rust', './ci/container-images/permaplant-rust')

        docker.image('postgis/postgis:13-3.1').withRun('-e "POSTGRES_USER=ci" -e "POSTGRES_PASSWORD=ci"') { c ->
            rustImage.inside("--link ${c.id}:db -e 'DATABASE_URL=postgres://ci:ci@db/ci'") {
                checkout scm

                wait_for_db()

                sh './ci/build-scripts/build-schema.sh'

                stash includes: 'backend/src/schema.rs', name: 'schema.rs'
                stash includes: 'frontend/src/api_types/definitions.ts', name: 'definitions.ts'
            }
        }
    }
}

stage('Build in Docker') {
    def parallelBuild = [:]

    parallelBuild['build-backend'] = {
        node('docker') {
            node_info()

            checkout scm
            def rustImage = docker.build('permaplant-rust', './ci/container-images/permaplant-rust')

            docker.image('postgis/postgis:13-3.1').withRun('-e "POSTGRES_USER=ci" -e "POSTGRES_PASSWORD=ci"') { c ->
                rustImage.inside("--link ${c.id}:db -e 'DATABASE_URL=postgres://ci:ci@db/ci'") {
                    checkout scm
                    unstash 'schema.rs'

                    wait_for_db()

                    sh 'cd backend && cargo build --release'

                    stash includes: 'backend/target/release/backend', name: 'backend'

                    sh 'cargo doc --document-private-items'
                    stash includes: 'backend/target/doc/', name: 'cargodoc'
                }
            }
        }
    }

    parallelBuild['build-frontend'] = {
        node('docker') {
            node_info()

            checkout scm
            def nodeImage = docker.build('permaplant-node', './ci/container-images/permaplant-node')

            nodeImage.inside {
                checkout scm
                unstash 'definitions.ts'

                stage('build-frontend') {
                    sh './ci/build-scripts/build-frontend.sh'
                    stash includes: 'frontend/dist/**/*', name: 'frontend'
                }

                stage('build-typedoc') {
                    sh 'cd frontend && npm run doc'
                    stash includes: 'frontend/src/generated/docs/', name: 'typedoc'
                }

                stage('build-storybook') {
                    sh './ci/build-scripts/build-storybook.sh'
                    stash includes: 'frontend/storybook-static/**/*', name: 'storybook'
                }
            }
        }
    }

    parallelBuild['build-mdbook'] = {
        node('docker') {
            node_info()

            checkout scm
            docker.build('permaplant-doc:build', './doc').inside {
                stage('build') {
                    sh 'mdbook build'
                    stash includes: 'book/', name: 'mdbook'
                }
            }
        }
    }

    parallel(parallelBuild)
}

stage('Deploy Prod') {
    node('permaplant && prod') {
        checkout scm

        echo 'Unstash Artifacts'
        unstash 'schema.rs'
        unstash 'frontend'
        unstash 'backend'
        unstash 'storybook'
        unstash 'typedoc'
        unstash 'mdbook'
        unstash 'cargodoc'

        echo 'Deploying to Prod ...'
        sh "sudo /usr/local/bin/permaplant-deploy.sh prod ${WORKSPACE}"

        copyDocumentation()
    }
}
